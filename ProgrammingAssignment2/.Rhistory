install.packages("KernSmooth")
library(KernSmooth)
install.packages("devtools")
library(devtools)
add2<- function(x,y){
x+y
}
x+y
}
add2<- function(x,y){
x+y
}
add2(2,3)
above <- function(x, n) {
use <- x > n
x[use]
}
above(x, 12)
x <- 1:20
above(x, 12)
above <- function(x, n=10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
mean[i] <- mean(y[, i])
}
means
}
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
exit
quit
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
library(swirl)
swirl()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4, div=2)
args(remainder)
submit()
?standard
?std
?stddev
??stddev
??std
??dev
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is, "fun!")
paste("Programming", "is, "fun!")
paste("Programming", "is", "fun!" )
q()
swirl()
library(swirl)
swirl()
submit()
telegram("Start,", "and", "then", "don't" "stop")
telegram("Start", "and", "then", "don't" "stop")
telegram("Start", "and", "then", "don't", "stop")
submit()
mad_libs("Caledonia", "appropriate", "clothing")
mad_libs(place="Caledonia", adjective="appropriate", noun="clothing")
submit()
"I"%p%"love"%p%"R!"
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
classI(t2)
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
exit
q()
rm(list=ls())
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flags, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
exit
q()
library(datasets)
data(iris)
?iris
head(iris)
virginica <- iris[identical(iris$Species, "virginica"]
virginica <- iris[identical(iris$Species, "virginica")]
virginica
virginica <- iris[,identical(iris$Species, "virginica")]
virginica
virginica <- iris[,[identical(iris$Species, "virginica")]]
virginica <- iris[[identical(iris$Species, "virginica")]]
virginica <- iris[identical(iris$Species, "virginica")]
virginica
virginica <- iris[iris$Species == "virginica"]
virginica <- iris[, iris$Species == "virginica"]
virginica <- iris["Sepal.Length", iris$Species == "virginica"]
virginica <- iris[iris$Species == "virginica",]
virginica
mean(virginica)
mean(virginica$Sepal.Length)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls
ls()
q()
q()
exit
exit()
quit()
ok()
q()
q()
q()
q()
stop()
stop
return
return()
Q
q()
x=matrix(1:16, 4, 4)
x
solve(x)
rm(x)
x<-matrix(c(1,0,0,1),2,2)
x
solve(x)
rm(x)
x<-matrix(c(1,0,0,0,1,0,0,0,1),3,3)
x
solve(x)
x[1,3]<-1
x
solve(x)
x
solve(x)
orig.matrix<-x
rm(x)
orig.matrix
solve(orig.matrix)
getwd()
newwd<-paste(getwd(), "/SinisterScientist/ProgrammingAssignment2", sep="")
setwd(newwd)
getwd()
source("cachematrix.R")
cacheSolve(orig.matrix)
solve(orig.matrix)
cacheSolve(orig.matrix)
x<-orig.matrix
cacheSolve(x)
source("cachematrix.R")
x <- makeCacheMatrix(orig.matrix)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
x <- makeCacheMatrix(orig.matrix)
cacheSolve(x)
cacheSolve(x)
